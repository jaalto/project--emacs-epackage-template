#!/bin/sh
#
#   Copyright
#
#       Copyright (C) 2011-2012 Jari Aalto <jari.aalto@cante.net>
#
#   License
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#   Install
#
#       Source this file on command line or from POSIX shell startup file:
#
#           . <this file's name>
#
#   Requirements
#
#       You must have GNU programs (grep etc.) in PATH first
#       You must know Emacs Lisp Programming
#       You must know Git well (branching, merging etc.)
#       You must have epackage.el installed, see
#       <http://www.emacswiki.org/emacs/DELPS#toc6>
#
#   Decription
#
#	Run command "Ehelp" to list all commands briefly.
#

Ehelp ()
{

    local header
    header="\
Shell command line functions for Distributed Emacs Lisp Package
Management <http://www.emacswiki.org/emacs/DELPS>. Updates
to these commands are available at
<https://github.com/jaalto/project--emacs-epackage-template>. Please
familiarize yourself with the procedure by reading README at the above
site first before using this helper functions."


    local short
    short="\

Provides following user commands. The rest are just internal
helpers. Use --help for each command for more detailed information.

    Egit [URL]		     Import current src, from URL, or emacswiki:FILE.el

    Ever [file.el ...]	     Display version and deps information from all, or given files
    Edir <PACKAGE NAME> FILE From FILE determine and create epackage/ template files
    Edef [dir]		     Update loaddefs in epackage/ directory
    Elint file.el ...	     Lint files to find QA violations
    Ecomp file.el ...	     Byte compile Emacs Lisp files (QA check)
    Eclone GITURL	     Clone an existing epackage and set up branches (dev only)

Call Ehelp --help for longer help."


    local long
    long="

In a simplest case, here are the steps to start creating an epackage.

1. You have epackage.el downloaded and stored in ~/.emacs.d
2. You have the URL to lisp file you want to package (EmacsWiki.org)
3. Make empty directory, name does not matter. Cd into it.
4. Import code to Git repository from URL

    Egit <URL>

    Follow the displayed instructions to commit and tag.
    If you don't see obvious version number, you must open the *.el
    in \$EDITOR and examine what might be the last modified date
    and version number.

    After this step, you have imported raw upstream code is in
    Git \"upstream\" branch.

5.  Create \"master\" branch (See \"Egit\" output above):

    git git checkout -b master

6.  Generate template files from master file:

    Edir <PACKAGE-NAME> <FILE>.el

7.  Edit the generated files in epackage/ dir and commit.

    cd epackage/
    .. edit files
    .. remove files that may not be relevant (*-compile.el etc.).
    git add .
    git commit -m \"epackage/: new\"

8.  Create repository at Github, and push

    git remote add github <your repository URL>
    git push github upstream master
    git push github --tags

9   Last, contact Epackage Sources List maintainer to have your epackage
    URL included. See
    <https://github.com/jaalto/project--emacs-epackage-sources-list>."

    echo "$header"

    while :
    do
        case "$1" in
            --help)
                echo "$short"
                echo "$long"
                break
                ;;
            *)  echo "$short"
		break
                ;;
        esac
    done
}

Ever ()
{
    local help
    help="\
SYNOPSIS
    Ever [file.el ...]

OPTIONS
    -h, --help  Show help

DESCRIPTION
    Epackage exaine version and depends information

    Grep lines looking like REQUIRE, DATE, EMAIL, URL, VERSION from
    Emacs Lisp files.

    If no files are given, search all files recursively from current dir."

    unset argv

    case "$1" in
        -h | --help )
            echo "$help"
            return 0
            ;;
    esac

    [ "$1" ] && argv=/dev/null

    # Package-Requires is ELPA header.
    # See http://marmalade-repo.org/doc-files/package.5.html

    ${argv+echo "$@"} ${argv:-find . -type f -name \*.el -a ! -path "*/epackage/*"} |
    xargs \
    egrep -i '\<v[0-9]+\.|\<version\>|[a-z0-9]@[a-z]|http:/|git:/|\<20[0-1][0-9]|\(require |Package-Requires'  |
    egrep -iv 'emacs-(major-|minor-)?version|%s' |
    egrep -iv '(lat|eith)er version|version( of|\))|\(version' |
    egrep -iv '^[;\"]+ *\(require|[\[\"]http|http-version|version of|www.gnu.org' |
    egrep -iv 'mime-version|client-version|older +version' |
    egrep -iv '\((defun|defmacro|defsubst|define|let|pop|display|message|error|autoload)' |
    egrep -iv '\([^ ]+version| --version|\(setq ' |
    awk "/[ :\'\"-]version[ :\'\"-]/ && ! /[0-9]/ { next } { print }"

    unset argv
}


E_lisp ()
{
    local dummy
    dummy="THIS IS INTERNAL. Not meant to be user callable."

    local help
    help="\
SYNOPSIS
    E_lisp

DESCRIPTION
    Return package.el Emacs Lisp file location"

    local file

    if [ "$EPACKAGE_ROOT" ]; then
        file="$EPACKAGE_ROOT/epackage.el"

        if [ ! -f "$file" ]; then
            echo "[ERROR] Invalid $EPACKAGE_ROOT, not such file: $list" >&2
            return 1
        fi

    else # Try to guess
        file=$(find $HOME/.emacs.d -maxdepth 3 \
               -type f -name epackage.el 2> /dev/null)
    fi

    if [ ! "$file" ]; then
        echo "[ERROR] \$EPACKAGE_ROOT not set to directory of epackage.el" >&2
        return 1
    fi

    echo "$file"
}

Ecomp ()
{
    local help
    help="\
SYNOPSIS
    Ecomp [options] file.el ...

DESCRIPTION
    Byte compile Emacs Lisp files

    The current directory and all subdirectories (excluding VCS dirs)
    are made available during byte compilation so that possible
    'require' statements calls are met.

OPTIONS
    -d, --dir   Directory to add to Emacs load-path. Can be given
                multiple times
    -l, --load  See emacs(1)
    -t, --test  Run in test mode. Do now actually execute commands.
    *-, --*     Passed to emacs(1). Supports only single options and not
                options with arguments.
    -h, --help  Show help

ENVIRONMENT
    EPACKAGE_EMACS
        Emacs binary to use. Defaults to 'emacs'.

STANDARDS
    GNU Emacs Lisp Reference Manual, sectoion 16, Byte Compilation
    http://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Byte-Compilation"

    unset test

    local list
    local opt

    while :
    do
        case "$1" in
            -h | --help )
                echo "$help"
                return 0
                ;;
            -d | --dir )
                shift
                list="$list $(cd $1 && pwd)"
                shift
                ;;
            -t | --test )
                test="test"
                shift
                ;;
            -l | --load )
                opt="$opt $1 $2"
                shift 2
                ;;
            -*) opt="$opt $1"           # Preserve Emacs options
                shift
                ;;
            *) break
                ;;
        esac
    done

    if [ ! "$1" ]; then
        echo "[ERROR] Missing Emacs Lisp file(s) to byte compile" >&2
        return 1
    fi

    local root=$(dirname "$1")

    local file
    file="${TMPDIR:-/tmp}/Egit.${LOGNAME:-${NAME:-foo}}.$$.elisp.tmp"

    #  Make emacs faster
    echo "\
(setq vc-handled-backends  nil)
(setq font-lock-verbose    nil)
(setq global-font-lock-mode nil)
(setq byte-compile-verbose nil)" \
    > "$file"

    local dir
    for dir in $list $( find $root \
                        -type d \
                        -a ! -path "*.git*" \
                        -a ! -path "*.hg" \
                        -a ! -path "*.bzr" \
                        -a ! -path "*.svn" \
                        -a ! -path "*.mtn" \
                        -a ! -path "*CVS" )
    do
        echo "(add-to-list 'load-path \"$dir\")" >> "$file"
    done

    [ "$dir" ] && opt="--load $file"

    local emacs
    emacs=emacs

    if [ /usr/bin/emacs-nox ]; then  # Optimize by using non-X
	emacs=/usr/bin/emacs-nox
    elif [ /usr/bin/emacs ]; then
	emacs=/usr/bin/emacs
    fi

    ${test:+echo} ${EPACKAGE_EMACS:-$emacs} \
        --quick \
        --batch \
        --debug-init \
        $opt \
        --funcall batch-byte-compile \
        "$@" 2>&1

    rm -f "$file"
}

Elint ()
{
    local help
    help="\
SYNOPSIS
    Elint [options] file.el ...

DESCRIPTION
    Lint Emacs Lisp files for Quality assurance violations.

    Examine each *.el to find ay deviations from guidelines know
    to writng Emacs extensions. Startdard Emacs check include
    lisp-mnt.el, chekdoc.el, elint.el and byte compilation.

    Lint testing is delegated to epackage.el

OPTIONS
    -t, --test  Run in test mode. Do now actually execute commands.

BUGS
    Linting will take considerable amount of time. This is mostly due
    to elint.el, which examines call syntaxes. It has to collect
    function call information by opening *.el.gz files in Emacs
    distribution to cache results before it can check used calls. This
    is *slow*.

    Try to lint as many files as possible at one go. The Elint is
    loaded only once at start and reused for subsequent files:

        Elint file1.el file2.el ...

    Whereas here, elint is loaded for every file (separate Emacs calls):

        Elint file1.el
        Elint file2.el

OPTIONS
    -d, --dir   Directory to add to Emacs load-path. Can be given
                multiple times
    -l, --load  See emacs(1)
    -t, --test  Run in test mode. Do now actually execute commands.
    *-, --*     Passed to emacs(1). Supports only single options and not
                options with arguments.
    -h, --help  Show help

ENVIRONMENT
    EPACKAGE_EMACS
        Emacs binary to use. Defaults to 'emacs'.

    EPACKAGE_ROOT
        Directory location of epackage.el file to use. By default Various
        locations under ~/.emacs.d are tried.

STANDARDS
    Emacs Lisp Software Quality Assurance (QA) related links:
    http://pinboard.in/u:jariaalto/t:emacs/t:elisp/t:qa"

    unset test

    local list
    local opt

    while :
    do
        case "$1" in
            -h | --help )
                echo "$help"
                return 0
                ;;
            -d | --dir )
                shift
                list="$list $(cd $1 && pwd)"
                shift
                ;;
            -t | --test )
                test="test"
                shift
                ;;
            -l | --load )
                opt="$opt $1 $2"
                shift 2
                ;;
            -*) opt="$opt $1"           # Preserve Emacs options
                shift
                ;;
            *) break
                ;;
        esac
    done

    local lisp
    lisp=$(E_lisp)

    [ "$lisp" ] || return 1

    if [ ! "$1" ]; then
        echo "[ERROR] Missing Emacs Lisp file(s) to lint" >&2
        return 1
    fi

    path="${TMPDIR:-/tmp}/Egit.${LOGNAME:-${NAME:-foo}}.$$.path.tmp"
    : > "$path"

    local dir
    for dir in $list
    do
        echo "(add-to-list 'load-path \"$dir\")" >> "$path"
    done


    local file
    file="${TMPDIR:-/tmp}/Egit.${LOGNAME:-${NAME:-foo}}.$$.lint.tmp"

    local emacs
    emacs=emacs

    if [ /usr/bin/emacs-nox ]; then  # Optimize by using non-X
	emacs=/usr/bin/emacs-nox
    elif [ /usr/bin/emacs ]; then
	emacs=/usr/bin/emacs
    fi

    ${test:+echo} ${EPACKAGE_EMACS:-$emacs} \
        --quick \
        --batch \
        --debug-init \
	--load "$path" \
	$opt \
        --load "$lisp" \
        --funcall epackage-batch-devel-lint-lisp \
        "$@" > "$file" 2>&1

    [ "$test" ] && return 0

    if ! egrep --after-context=10000 '^\*\*\* Lint' "$file" ; then
        # Error happened
        unset test

        cat "$file"
        rm -f "$file"

        return 2
    fi

    rm -f "$file" "$path"
    unset test
}

Edef ()
{
    local help
    help="\
SYNOPSIS
    Edef [DIR]

DESCRIPTION
    Update loaddefs file in DIR/epackage/*-epackage-0loaddefs.el by
    reading all Emacs Lisp files recursively. DIR defaults to
    current directory.

OPTIONS
    -t, --test  Run in test mode. Do now actually execute commands.
    -h, --help  Show help

EXAMPLES
    Regenerate loaddefs e.g. after upgrading to latest upstream code:

        cd /path/to/epackage-root-dir
        Edef

ENVIRONMENT

    EPACKAGE_EMACS
        Path to emacs binary to use. Defaults to \"emacs\".

    EPACKAGE_ROOT
        Directory location of epackage.el file to use. By default Various
        locations under ~/.emacs.d are tried.

STANDARDS
    The Epackage primer
    <https://github.com/jaalto/project--emacs-epackage-template>."

    unset test

    case "$1" in
        -h | --help )
            echo "$help"
            return 0
            ;;
        -t | --test )
            test="test"
            shift
            ;;
    esac

    local lisp
    lisp=$(E_lisp)

    [ "$lisp" ] || return 1

    local dir
    dir=$1

    if [ ! "$dir" ]; then
	dir=$(pwd)
    fi

    if [ ! -d "$dir" ]; then
        echo "[ERROR] No such directory: $dir" >&2
        return 1
    fi

    local edir
    edir=$dir/epackage

    local pkg
    pkg=$(awk '/^[Pp]ackage:/ {print $2 ; exit}' $edir/info)

    if [ ! "$pkg" ]; then
        echo "[ERROR] Can't read package name from $edir/info" >&2
        return 1
    fi

    touch $edir/$pkg-epackage-0loaddefs.el	# Must exist

    local emacs
    emacs=emacs

    if [ /usr/bin/emacs-nox ]; then  # Optimize by using non-X
	emacs=/usr/bin/emacs-nox
    elif [ /usr/bin/emacs ]; then
	emacs=/usr/bin/emacs
    fi

    ${test:+echo} ${EPACKAGE_EMACS:-$emacs} \
        -quick \
        --batch \
        --debug-init \
	--load "$lisp" \
        --funcall epackage-batch-autoload-generate-loaddefs-dir \
        "$dir"

    unset test
}

Edir ()
{
    local help
    help="\
SYNOPSIS
    Edir [options] <PACKAGE NAME> DIR

DESCRIPTION
    Epackage directory populate (epackage/)

    Examine DIR recursively to find information about license,
    upstream email etc. and write template files to epackage/
    directory (will be created).

    Rules for selecting PACKAGE NAME:

    - Use <NAME>-mode if the package is a major or minor mode.
      An example: python.el => python-mode.
    - Use lib-<NAME> if package is meant to be a library.
      An example: date-calc.el => lib-date-calc


OPTIONS
    -t, --test  Run in test mode. Do now actually execute commands.
    -h, --help  Show help

EXAMPLES
    Generate templates for regular file:

        Edir toggle.el toggle.el

    Generate templates for a library package:

        Edir lib-date-calc date-calc.el

ENVIRONMENT

    EPACKAGE_EMACS
        Path to emacs binary to use. Defaults to \"emacs\".

    EPACKAGE_ROOT
        Directory location of epackage.el file to use. By default Various
        locations under ~/.emacs.d are tried.

STANDARDS
    The Epackage primer
    <https://github.com/jaalto/project--emacs-epackage-template>."

    unset test

    case "$1" in
        -h | --help )
            echo "$help"
            return 0
            ;;
        -t | --test )
            test="test"
            shift
            ;;
    esac

    local lisp
    lisp=$(E_lisp)

    [ "$lisp" ] || return 1

    local package
    package=$(echo "$1" | sed "s/\.el$//")

    local dir
    dir=$2

    if [ ! "$package" ]; then
        echo "[ERROR] Argument 1 missing (package NAME)." >&2
        return 1
    fi

    if [ ! "$dir" ]; then
        echo "[ERROR] Argument 2 missing (DIRECTORY)" >&2
        return 1
    fi

    if [ ! -d "$dir" ]; then
        echo "[ERROR] No such directory: $dir" >&2
        return 1
    fi

    local emacs
    emacs=emacs

    if [ /usr/bin/emacs-nox ]; then  # Optimize by using non-X
	emacs=/usr/bin/emacs-nox
    elif [ /usr/bin/emacs ]; then
	emacs=/usr/bin/emacs
    fi

    ${test:+echo} ${EPACKAGE_EMACS:-$emacs} \
        -quick \
        --batch \
        --debug-init \
        --load "$lisp" \
        --funcall epackage-batch-devel-compose-package-dir \
        $package \
        "$dir"

    unset test
}

E_indate ()
{
    local dummy
    dummy="THIS IS INTERNAL. Not meant to be user callable."

    local help
    help="\
SYNOPSIS
    E_indate [options] file.el

DESCRIPTION
    Return internal modified date by examing contents of FILE.

OPTIONS
    -h, --help  Show help"

    case "$1" in
        -h | --help )
            echo "$help"
            return 0
            ;;
    esac

    local file
    file="$1"

    if [ ! "$file" ]; then
        echo "[ERROR]: Missing argument: FILE.el" >&2
        return 2
    fi

    # Time-stamp: <2010-02-02 19:37:18 UTC logname>
    set -- $(egrep -i --only-matching --max-count=1 \
             "^;+ +(Time-Stamp|Last[ -](Modified|Updated)): +<....-..-.." "$file")

    if [ "$3" ]; then
        echo $3 | sed "s/^.//"          # The leading "<"
        return 0
    fi

    # Any YYYY-MM-DD
    set -- $(egrep -i --only-matching  \
		"[12][09][0-9][0-9]-[01][0-9]-[1-3][0-9]" "$file" |
	     sort |
	     tail --lines=1 )

    if [ "$1" ]; then
        echo $1
        return 0
    fi

    return 1
}

E_filedate ()
{
    local dummy
    dummy="THIS IS INTERNAL. Not meant to be user callable."

    local help
    help="\
SYNOPSIS
    E_filedate [options] FILE

DESCRIPTION
    Return ISO 8601 date of FILE.

OPTIONS
    -h, --help  Show help"

    case "$1" in
        -h | --help )
            echo "$help"
            return 0
            ;;
    esac

    if [ ! "$1" ]; then
        echo "[ERROR]: Missing FILE" >&2
        return 2
    fi

    perl -e '$mtime = (stat shift @ARGV)[9];
             ($y, $m, $d) = (localtime $mtime)[5,4,3];
             $y += 1900;
             $m++;
             printf( qq(%d-%02d-%02d), $y, $m, $d);
             ' \
             "$1"
}

E_version ()
{
    local dummy
    dummy="THIS IS INTERNAL. Not meant to be user callable."

    local help
    help="\
SYNOPSIS
    E_version [options] FILE

DESCRIPTION
    Return version of FILE.

OPTIONS
    -h, --help  Show help"

    case "$1" in
        -h | --help )
            echo "$help"
            return 0
            ;;
    esac

    if [ ! "$1" ]; then
        echo "[ERROR]: Missing FILE" >&2
        return 2
    fi

    # Search for standard line ";; Version: 3.0"

    set -- $(egrep --only-matching --max-count=1 \
             "^;+ +Version: *[^ ]+" "$1" )

    if [ "$3" ]; then
        echo $3
        return 0
    fi

    return 1
}

Eclone ()
{
    local help

    help="\
SYNOPSIS
    Eclone GITURL

DESCRIPTION
    Clone epackage from URL. Check out all relevant branches.

    If destination directory contains two dashes (--), the name
    used is from the right hand side. This makes it possible to
    use sensible names for git repositories (like in Github) for
    multiple purposes.

    if epackeg/info::Vcs-Url points to a *.git repository, define
    'git remote upstream ...' and run 'git fetch upstream'.

OPTIONS
    -t, --test  Run in test mode. Do now actually execute commands.
    -h, --help  Show help

EXAMPLES
    Clone typical packager repository under 'package':

        Eclone git://example.com/package.git

    Clone project directory from github. The saved directory is
    'project' after removing everything to the left of two dashes:

	Eclone git://example.com/dir/emacs--project.git"

    unset test

    case "$1" in
        -h | --help )
            echo "$help"
            return 0
            ;;
        -t | --test )
            test="test"
            shift
            ;;
    esac


    [ "$1" ] || return 1

    local url
    url="$1"

    case "$url" in
	*.git )
	    ;;
	    *)
	    echo "[WARN] URL may not be *.git directory: $url" >&2
	    ;;
    esac

    local name
    name=$(basename $url)
    name=${name#*--}

    ${test:+echo} git clone $url $name ||
    return $?

    (
	${test:+echo} cd $name
        ${test:+echo} git checkout --track -b upstream origin/upstream
	${test:+echo} git checkout master

	[ "$test" ] && return 0

	url=$(awk '/Vcs-Url/ { print $2 }' epackage/info)

	case "$url" in
	    *.git )
		git remote add upstream $url
		git fetch upstream
		git checkout --track -b upstream-master upstream/master
		git checkout master
		;;
	    *)
		echo "[NOTE] Upstream does not use git, but: $url"
	esac
    )

    unset test
}

E_gitignore ()
{
    local dummy
    dummy="THIS IS INTERNAL. Not meant to be user callable."

    local help
    help="Write gitignore file"

    echo "\
.svn
.hg
.bzr
.mtn
.darcs
CVS
" > .gitignore
}


E_mode ()
{
    local dummy
    dummy="THIS IS INTERNAL. Not meant to be user callable."

    local help
    help="Check if file is minor, major mode"

    egrep -n '\(define-[a-z-]+-mode ' "$@" /dev/null
}

E_vcs ()
{
    local dummy
    dummy="THIS IS INTERNAL. Not meant to be user callable."

    local help
    help="Return VCS info: <type> revision date"

    if [ -d .svn ]; then
	svn log --limit 1 |
	awk '/^r[0-9]/ { gsub("[|r]", ""); print "svn " $1 " " $3 ; exit }'
	return 0

    elif [ -d .hg ]; then
	hg log --limit 1 | awk '{ print "hg " $2 " " $3; exit }'
	return 0

    elif [ -d .bzr ]; then
	bzr log --limit 1 --show-ids |
	awk '
	    /^revision-id:/ { rev = $2 }
	    /^timestamp:/   { print "bzr " rev " " $3 ; exit }
        '
	return 0
    fi

    return 1
}

Egit ()
{
    local help
    help="\
SYNOPSIS
    Egit [options] [URL]

DESCRIPTION
    Epackage git import.

    Import source code (Emacs Lisp *.el) into epackage Git repository.
    The URL can be http:// to a single *.el file or git:// locations
    of upstream code. If URL is not given, it is expected that the
    upstream code is already in current directory.

    This command only prepares for the initial import to Git
    'upstream' branch. From there the steps needed are:

    - commit (to upstream branch)
    - tag the upstream branch
    - create 'master' branch off upstream
    - populate epackage/ directory. See command 'Edir'.

    The URL can be in format:

    - Standard http:// or git:// protocol
    - ew:file.el; file is retrieved from EmacsWiki. Synonym prefixes
      are 'ewiki:FILE.el' and 'emacswiki:FILE.el'

OPTIONS

    -g, --git   Confirm that the URL is git direcory
    -t, --test  Run in test mode. Do now actually execute commands.
    -h, --help  Show help

EXAMPLES
    You have a direct URL to the Emacs Lisp file. Import it:

        Egit http://www.emacswiki.org/emacs/download/<filename>.el

    Upstream uses Git repository for Emacs Lisp source code. Import it:

        Egit git://github.com/USER/PROJECT.git

    Upstream sources URL does not have *.git extension, confirm that
    this is still Gir URL:

        Egit -g http://example.com/git/path

    The sources are in the currect directory; unpacked. Import them:

        Egit

STANDARDS
   The Epackage primer
   <https://github.com/jaalto/project--emacs-epackage-template>."

    unset test

    local git

    case "$1" in
        -h | --help )
            echo "$help"
            return 0
            ;;
        -g | --git )
            git="git"
            shift
            ;;
        -t | --test )
            test="test"
            shift
            ;;
    esac

    local url
    url=$1

    if [ -d .git ]; then
        echo "[ERROR] .git exists" >&2
        return 1
    fi

    local empty
    empty="empty"

    local files

    if find . -type f | egrep -v "\.(svn|hg|bzr|darcs)|CVS" | grep  '.' ; then
        empty=""
    fi

    local giturl
    local wget

    case "$url" in
        ew:* | ewiki:* | emacswiki:* )
            wget="wget"
            url=$(echo $url |
		sed -e "s/^ew:" \
		    -e "s/^ewiki:" \
		    -e "s/^emacswiki:" \
	    )
            url="http://www.emacswiki.org/emacs/download/$url"
            ;;
        http:/*.el )
            wget="wget"
            ;;

        git://* | *.git )
            giturl="$url"
            url=""
            ;;

        http:/* | https:/* )
	    if [ "$git" ]; then
		giturl="$url"
		url=""
	    else
		echo "[ERROR] Unknown URL. See -g. If this is svn or hg, download manually." >&2
		return 1
	    fi
            ;;

        *[a-z]* )
            echo "[ERROR] Not a known URL: $url" >&2
            return 1
            ;;
    esac

    local UAGENT
    UAGENT="Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.3) Gecko/20090913 Firefox/3.5.3";

    if [ "$wget" ]; then

        wget=$(basename $url)

	if [ -f "$wget" ]; then
	    echo "[ERROR] File exists: $wget" >&2
	    return 1
	fi

	case "$wget" in
	    *.el )
		;;
	    .*[a-z] )			# .tar.gz
		echo "[WARN] Not *.el in URL: $url" >&2
		;;
	    *)
		url="$url.el"
		wget="$wget.el"
		echo "[WARN] Added missing *.el to URL: $url" >&2
		;;
	esac


        ${test:+echo} wget \
	    --no-check-certificate \
	    --user-agent="$UAGENT" \
	    "$url" || return $?

        empty=""

	if [ ! -s "$wget" ]; then
	    echo "[ERROR] Download failed" >&2
	    rm -f "$wget"
	    return 1
	fi
    fi

    local date
    date=$(date "+%Y-%m-%d")

    local debug
    local file
    file="${TMPDIR:-/tmp}/Egit.${LOGNAME:-${NAME:-foo}}.$$.tmp"


    if [ "$giturl" ]; then

        debug="Action: Git"

        if [ ! "$empty" ]; then
            echo "[WARN] Directory not empty. Press (C-c) to abort" >&2
            read
        fi

        ${test:+echo} git init
        ${test:+echo} git symbolic-ref HEAD refs/heads/upstream

        ${test:+echo} git commit --allow-empty -m "Empty upstream branch"

        ${test:+echo} git remote add upstream $giturl

	case "$giturl" in
	    http*) echo "Cloning through HTTP (may be slow)..." ;;
	esac

        ${test:+echo} git fetch upstream
        ${test:+echo} git checkout --track -b upstream-master upstream/master

        ${test:+echo} git checkout upstream
        ${test:+echo} git merge upstream-master

	# Create "master" based on "upstream"
        ${test:+echo} git branch master upstream

        Ever | tee "$file"

	E_mode $(find . -type f -name "*.el" -a ! -path "*epackage*")

        local version
        version=$(E_version "$file")

        local version
        version=$(E_version "$file")
        [ "$version" ] || version="VERSION"

        # Show last commits (upstream)

        git log --max-count=5 --date=short --pretty='format:%h %ci %s' |
        sed "s/^/#GIT /"

        # We know that upstream commit is at 3rd commit backward
        # git merge-base upstream/master HEAD | cut -c1-7

        # SHA DATE TIME TZ
        set -- $(git log --skip=2 --max-count=1 \
                 --date=short --pretty='format:%h %ci')

        echo
        echo "# WHAT YOU NEED TO DO NEXT:"
        echo "# Examine information and correct commands below."
        echo "git tag upstream/$2--$version-git-$1 $1"
	echo "git checkout master"

	local name
	name=$(basename $giturl)
	name=${name%/}			# Delete trailing slash
	name=${name%.git}
	name=${name%-emacs}
	name=${name#emacs-}

	echo "Edir $name ."

    elif [ "$wget" ]; then

        debug="Action: URL"

        ${test:+echo} git init
        ${test:+echo} git symbolic-ref HEAD refs/heads/upstream

	E_gitignore

        ${test:+echo} git add -A
        ${test:+echo} git rm --cached .gitignore

        local version

        Ever | tee "$file"

	local mode

	if E_mode $(find . -type f -name "*.el" -a ! -path "*epackage*")
	then
	    mode="-mode"
	fi

        local version
        version=$(E_version "$file")

        local fdate
        fdate=$date
        fdate=$(E_indate "$file" || E_filedate "$file")

        rm -f "$file"

        [ "$test" ] && fdate="YYYY-MM-DD"

        [ "$test" ] || ls -l

        git commit -m "Import upstream $date from $url"

        echo "# WHAT YOU NEED TO DO NEXT:"
        echo "# Examine information and correct commands below."

        echo "git tag upstream/$fdate--$version"
	echo "git checkout -b master"

	file=$wget

	echo "Edir ${file%.el}$mode ."

	rm -f .gitignore

    else

        debug="Action: ELSE"

        if [ "$empty" ]; then
            echo "[WARN] No files. Create upstream branch (C-c to abort)" >&2
            read
        fi

        ${test:+echo} git init
        ${test:+echo} git symbolic-ref HEAD refs/heads/upstream

	E_gitignore

        ${test:+echo} git add .
        ${test:+echo} git rm --cached .gitignore

        Ever

	local version
	local date

        for file in $(ls *.el 2> /dev/null)
        do
	    [ -f "$file" ] || continue

            echo "# $file"
            date=$(E_indate "$file" || E_filedate "$file")
            version=$(E_version "$file")
	    echo $version
        done

	local mode

	if E_mode $(find . -type f -name "*.el" -a ! -path "*epackage*")
	then
	    mode="-mode"
	fi

	[ "$date" ] || date="YYYY-MM-DD"
	[ "$version" ] || version="N.N"

	local revision

	set -- $(E_vcs)

	if [ "$1" ]; then
	    echo "VCS: $1 $2 $3"
	    revision="-$1-$2"
	    date=$3
	fi

        echo
        echo "# WHAT YOU NEED TO DO NEXT:"
        echo "# Examine information and correct commands below."

        echo "git commit -m 'Import upstream $date from ...'"
        echo "git tag upstream/$date--$version$revision"
        echo "git checkout -b master"
	echo "Edir ${file%.el}$mode ."

	rm -f .gitignore
    fi

    unset test
}

# End of file
